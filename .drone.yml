kind: pipeline
type: docker
name: terraform-pipeline

platform:
  os: linux
  arch: amd64

clone:
  disable: true

volumes:
  - name: terraform
    host:
      path: /mnt/apppooldisk/devappdata/drone-runners

steps:
- name: create_directories
  image: alpine:latest
  volumes:
    - name: terraform
      path: /workspace/terraform
  commands:
    - mkdir -p /workspace/terraform/${DRONE_REPO_OWNER}/${DRONE_REPO_NAME}/

- name: custom_clone
  image: docker:git
  network_mode: br1.201
  volumes:
    - name: terraform
      path: /workspace/terraform
  environment:
    GIT_REPO_URL:
      from_secret: GIT_REPO_URL
  commands:
    - if [ -d /workspace/terraform/${DRONE_REPO_OWNER}/${DRONE_REPO_NAME}/.git ]; then
        cd /workspace/terraform/${DRONE_REPO_OWNER}/${DRONE_REPO_NAME}/ && git fetch && git reset --hard origin/main;
      else
        git clone $GIT_REPO_URL /workspace/terraform/${DRONE_REPO_OWNER}/${DRONE_REPO_NAME}/;
      fi

# - name: terraform-plan
#   image: alpine:latest
#   network_mode: br1.201
#   volumes:
#     - name: terraform
#       path: /workspace/terraform
#   environment:
#     AWS_ACCESS_KEY_ID:
#       from_secret: AWS_ACCESS_KEY_ID
#     AWS_SECRET_ACCESS_KEY:
#       from_secret: AWS_SECRET_ACCESS_KEY
#     TF_VAR_SOURCE_SSH_NET:
#       from_secret: TF_VAR_SOURCE_SSH_NET
#     TF_VAR_PUBLIC_KEY:
#       from_secret: TF_VAR_PUBLIC_KEY
#     TF_VAR_HOME_IP:
#       from_secret: TF_VAR_HOME_IP
#   commands:
#     - apk add --no-cache curl unzip bash
#     # # Install AWS CLI
#     # - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#     # - unzip awscliv2.zip && ./aws/install
#     # # Install Terraform
#     # - curl -LO "https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip"
#     # - unzip terraform_1.5.0_linux_amd64.zip && mv terraform /usr/local/bin/
#     # # Install kubectl
#     # - curl -LO "https://dl.k8s.io/release/v1.21.0/bin/linux/amd64/kubectl"
#     # - chmod +x kubectl && mv kubectl /usr/local/bin/
#     - cd /workspace/terraform/${DRONE_REPO_OWNER}/${DRONE_REPO_NAME}/
#     - terraform init
#     - terraform plan

# - name: terraform-apply
#   image: hashicorp/terraform:latest
#   network_mode: br1.201
#   volumes:
#     - name: terraform
#       path: /workspace/terraform
#   environment:
#     AWS_ACCESS_KEY_ID:
#       from_secret: AWS_ACCESS_KEY_ID
#     AWS_SECRET_ACCESS_KEY:
#       from_secret: AWS_SECRET_ACCESS_KEY
#     TF_VAR_SOURCE_SSH_NET:
#       from_secret: TF_VAR_SOURCE_SSH_NET
#     TF_VAR_PUBLIC_KEY:
#       from_secret: TF_VAR_PUBLIC_KEY
#     TF_VAR_HOME_IP:
#       from_secret: TF_VAR_HOME_IP
#   commands:
#     - cd /workspace/terraform/${DRONE_REPO_OWNER}/${DRONE_REPO_NAME}/
#     - apk add --no-cache curl unzip bash git
#     # Install AWS CLI
#     - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#     - unzip awscliv2.zip && ./aws/install
#     # Install Terraform
#     - curl -LO "https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip"
#     - unzip terraform_1.5.0_linux_amd64.zip && mv terraform /usr/local/bin/
#     # Install kubectl
#     - curl -LO "https://dl.k8s.io/release/v1.21.0/bin/linux/amd64/kubectl"
#     - chmod +x kubectl && mv kubectl /usr/local/bin/
#     - cd /workspace/terraform/${DRONE_REPO_OWNER}/${DRONE_REPO_NAME}/
#     - terraform init
#     - terraform apply -auto-approve

- name: terraform-destroy
  image: hashicorp/terraform:latest
  network_mode: br1.201
  volumes:
    - name: terraform
      path: /workspace/terraform
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
    TF_VAR_SOURCE_SSH_NET:
      from_secret: TF_VAR_SOURCE_SSH_NET
    TF_VAR_PUBLIC_KEY:
      from_secret: TF_VAR_PUBLIC_KEY
    TF_VAR_HOME_IP:
      from_secret: TF_VAR_HOME_IP
  commands:
    - cd /workspace/terraform/${DRONE_REPO_OWNER}/${DRONE_REPO_NAME}/
    - terraform destroy -auto-approve

trigger:
  event:
    - tag
